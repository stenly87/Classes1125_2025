// классы располагаются в пространствах имен
namespace TestNamespace
{
    // пример простого класса
    public class Human
    {
        // статичный конструктор, он может быть только один
        // выполняется единожды в момент обращения к классу
        // работает только со статичными членами класса
        static Human()
        { }

        // поле 
        private string name;
        int age;

        // аналог конструктора по умолчанию
        // потому что в нем нет аргументов
        public Human()
        {
            name = "Безымянный";
        }

        // второй конструктор будет запрашивать имя
        // это имя будет назначаться полю в объекте
        public Human(string name)
        {
            this.name = name;
        }

        // конструкторы должны различаться хотя бы по типу аргументов
        public Human(int age)
        {
            this.age = age;
        }

        // еще один конструктор, с двумя аргументами
        // первый вариант немного избыточен, заменим его другим
        //public Human(string name, int age)
        //{
        //    this.name = name;
        //    this.age = age;
        //}

        // более правильный для данного случая
        // конструктор с двумя аргументами передает
        // один аргумент в конструктор с одним аргументом
        // сначала выполнится тело конструктора с одним аргументом
        // затем тело конструктора с двумя аргументами
        public Human(string name, int age) : this(name)
        {
            this.age = age;
        }

        // пример метода, ничего нового
        public void Print()
        {
            Console.WriteLine($"{name}, {age} годиков");
        }

        // пример простого свойства, управляющего полем name
        public string Name
        {
            get { return name; }   // аксессор - читает
            set { name = value; }  // мутатор - изменяет, value - то значение, которое свойство получит при назначении из кода
        }

        // Свойства позволяют избавиться от методов вида:
        public void SetName(string name)
        { this.name = name; }
        public string GetName()
        { return name; }

        // пример свойства с проверкой устанавливаемого значения
        public int Age
        {
            get { return age; }
            set
            {
                // если мы попытаемся назначать в свойство Age
                // значение меньше чем 18
                // то программа вызовет исключение
                if (value < 18)
                    throw new Exception("У нас только совершеннолетние сотрудники!");
                age = value;

            }
        }
    }
}